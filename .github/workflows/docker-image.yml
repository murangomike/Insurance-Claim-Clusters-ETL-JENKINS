name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: python:3.11-slim
      options: --user root

    env:
      VENV_DIR: venv

    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üîß Install system dependencies
      run: |
        apt-get update -y
        apt-get install -y build-essential gcc g++ python3-dev \
            libblas-dev liblapack-dev libatlas-base-dev gfortran

    - name: üêç Set up Python virtual environment
      run: |
        python3 -m venv "$VENV_DIR"
        . "$VENV_DIR/bin/activate"
        pip install --upgrade pip setuptools wheel
        pip install Flask==2.3.3 Flask-CORS==4.0.0
        pip install --only-binary=all scikit-learn==1.3.0 || pip install scikit-learn==1.3.0
        [ -f requirements.txt ] && pip install -r requirements.txt || echo "No requirements.txt"

    - name: üîç Verify package installation
      run: |
        . "$VENV_DIR/bin/activate"
        python -c "import flask; print('‚úÖ Flask:', flask.__version__)"
        python -c "import sklearn; print('‚úÖ scikit-learn:', sklearn.__version__)"
        python -c "import flask_cors; print('‚úÖ Flask-CORS imported successfully')"

    - name: üß™ Run tests if present
      if: ${{ hashFiles('tests/**') != '' }}
      run: |
        . "$VENV_DIR/bin/activate"
        pip install pytest
        pytest tests/

    - name: üöÄ Launch app in background
      run: |
        . "$VENV_DIR/bin/activate"
        if [ ! -f app.py ]; then
          echo "‚ùå app.py not found!"
          ls -la
          exit 1
        fi
        nohup python app.py > app.log 2>&1 &
        echo $! > app.pid
        sleep 3
        if ps -p $(cat app.pid) > /dev/null; then
          echo "‚úÖ App started with PID $(cat app.pid)"
        else
          echo "‚ùå App failed to start. Logs:"
          cat app.log
          exit 1
        fi

    - name: ‚úÖ Deployment successful
      if: ${{ success() }}
      run: |
        . "$VENV_DIR/bin/activate"
        pip list

    - name: üßπ Clean up
      if: always()
      run: |
        if [ -f app.pid ]; then
          PID=$(cat app.pid)
          if ps -p $PID > /dev/null; then
            kill $PID || true
          fi
          rm -f app.pid
        fi

    - name: ‚ùå Dump logs on failure
      if: failure()
      run: |
        [ -f app.log ] && cat app.log || echo "No app.log found."
